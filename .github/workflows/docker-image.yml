name: Docker Image CI

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:

  build:

    runs-on: ubuntu-18.04
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
    - uses: actions/checkout@v2
    - name: Test Postgres
      run: |
        npm ci
        node client.js
      env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
    - name: Build the Docker image
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: 127.0.0.1
        DB_NAME: postgres
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DJANGO_SYS_EMAIL: ${{ secrets.DJANGO_SYS_EMAIL }}
        DJANGO_SYS_EMAIL_PWD: ${{ secrets.DJANGO_SYS_EMAIL_PWD }}
        JIRA_ENDPOINT: ${{ secrets.JIRA_ENDPOINT }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
        MODE: "PYTEST"
      run: |
        docker-compose -f docker-compose-pytest-django.yml build --no-cache
        docker-compose -f docker-compose-pytest-django.yml up --force-recreate --exit-code-from django
